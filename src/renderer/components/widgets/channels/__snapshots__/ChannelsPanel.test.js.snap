// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChannelsPanel renders collapsed list if no bounds 1`] = `
<RootRef
  rootRef={
    Object {
      "current": null,
    }
  }
>
  <WithStyles(Grid)
    container={true}
    direction="column"
    item={true}
    xs={true}
  >
    <Memo(WithStyles(SidebarHeader))
      actions={
        Array [
          <Connect(WithStyles(Component)) />,
        ]
      }
      title="Channels"
    />
    <Memo(ScalingChannelsList)
      channels={
        Immutable.List [
          Immutable.Map {
            "id": 0,
            "name": "Channel 0",
            "private": false,
            "hash": "test-hash-0",
            "address": "zs1testaddress0",
            "unread": 0,
            "description": "",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-0",
            },
          },
          Immutable.Map {
            "id": 1,
            "name": "Channel 1",
            "private": true,
            "hash": "test-hash-1",
            "address": "zs1testaddress1",
            "unread": 1,
            "description": "Channel about 1",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-1",
            },
          },
          Immutable.Map {
            "id": 2,
            "name": "Channel 2",
            "private": false,
            "hash": "test-hash-2",
            "address": "zs1testaddress2",
            "unread": 2,
            "description": "",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-2",
            },
          },
          Immutable.Map {
            "id": 3,
            "name": "Channel 3",
            "private": true,
            "hash": "test-hash-3",
            "address": "zs1testaddress3",
            "unread": 3,
            "description": "Channel about 3",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-3",
            },
          },
        ]
      }
      maxHeight={0}
    />
  </WithStyles(Grid)>
</RootRef>
`;

exports[`ChannelsPanel renders component 1`] = `
<RootRef
  rootRef={
    Object {
      "current": null,
    }
  }
>
  <WithStyles(Grid)
    container={true}
    direction="column"
    item={true}
    xs={true}
  >
    <Memo(WithStyles(SidebarHeader))
      actions={
        Array [
          <Connect(WithStyles(Component)) />,
        ]
      }
      title="Channels"
    />
    <Memo(ScalingChannelsList)
      channels={
        Immutable.List [
          Immutable.Map {
            "id": 0,
            "name": "Channel 0",
            "private": false,
            "hash": "test-hash-0",
            "address": "zs1testaddress0",
            "unread": 0,
            "description": "",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-0",
            },
          },
          Immutable.Map {
            "id": 1,
            "name": "Channel 1",
            "private": true,
            "hash": "test-hash-1",
            "address": "zs1testaddress1",
            "unread": 1,
            "description": "Channel about 1",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-1",
            },
          },
          Immutable.Map {
            "id": 2,
            "name": "Channel 2",
            "private": false,
            "hash": "test-hash-2",
            "address": "zs1testaddress2",
            "unread": 2,
            "description": "",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-2",
            },
          },
          Immutable.Map {
            "id": 3,
            "name": "Channel 3",
            "private": true,
            "hash": "test-hash-3",
            "address": "zs1testaddress3",
            "unread": 3,
            "description": "Channel about 3",
            "keys": Immutable.Map {
              "ivk": "incoming-viewing-key-3",
            },
          },
        ]
      }
      maxHeight={130}
    />
  </WithStyles(Grid)>
</RootRef>
`;

exports[`ChannelsPanel renders loading 1`] = `
<RootRef
  rootRef={
    Object {
      "current": null,
    }
  }
>
  <WithStyles(Grid)
    container={true}
    direction="column"
    item={true}
    xs={true}
  >
    <Memo(WithStyles(SidebarHeader))
      actions={
        Array [
          <Connect(WithStyles(Component)) />,
        ]
      }
      title="Channels"
    />
    <Memo(ScalingChannelsList)
      channels={Immutable.List []}
      maxHeight={130}
    />
  </WithStyles(Grid)>
</RootRef>
`;
